# This is sourced from various tests directly and provides tooling
# for operating on the Docker containers spun up by docker-compose.

set -e
set -o pipefail
shopt -s expand_aliases

# The name of the current test, tweaked to make suitable for a docker container
# name. The extra underscore here delineates project name from containers, so in
# practice two underscores result. This allows us to identify all containers
# relating to a specific test reliably, outside of docker-compose.
testname=$(echo "${TEST_NAME}_" | sed 's/[^a-zA-Z0-9]/_/g')

# Enable command tracing with time info when requested
if [ -n "$TEST_TRACE_COMMANDS" ]; then
    # Redirect set -x output to a file descriptor
    exec 42>bashtrace
    BASH_XTRACEFD=42

    # Add an exit handler so timing info includes something that runs after the
    # last "real" command has executed, showing that command's execution time.
    trap true EXIT

    # Put timing info into execution trace and enable tracing. We use this
    # evaluation time as zero, and make times relative to it.
    N=`date +%s%N`
    export PS4='+[$(((`date +%s%N`-$N)/1000000))ms][${BASH_SOURCE}:${LINENO}]: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -x
fi

# Populate the files needed for our default docker-compose setup.
# Individual tests can still adapt this as needed. This might go
# into an initializer later.
docker_populate() {
    local template="${1:-default}"

    cp $DOCKER/setups/$template/docker-compose.yml .
    cp -pr $DOCKER/setups/$template/zeekscripts .

    if [ -d $DOCKER/setups/$template/scripts ]; then
        cp -pr $DOCKER/setups/$template/scripts .
    fi

    if [ -d $DOCKER/setups/$template/etc ]; then
        cp -pr $DOCKER/setups/$template/etc .
    fi
}

# The corresponding "docker-compose down" happens in docker-compose-teardown.
# Might shift this around in the future for better symmetry.
docker_compose_up() {
    local config1="${1:-docker-compose.yml}"
    local config2="${2:-docker-compose.override.yml}"

    if [ -f "${config2}" ]; then
        docker-compose -p ${testname} -f "$config1" -f "$config2" up -d
    else
        docker-compose -p ${testname} -f "$config1" up -d
    fi
}

# Wrapper to "docker exec" to run a command in a specific container.
# The wrapper provides the test-naming context so we select the
# relevant container.
docker_exec() {
    # If first argument starts with "-", we interpret everything up to a
    # required "--" as docker exec arguments.
    local args=()

    if [[ $1 == -* ]]; then
        while [[ $1 != '--' ]]; do
            args+=("$1")
            shift
        done

        # Skip the "--"
        shift
    fi

    local container="$1"
    shift
    local command="$@"

    docker exec ${args[@]} ${testname}_${container}_1 bash -c "$command"
}

zeek_client() {
    docker_exec -i -- client zeek-client -c /usr/local/etc/zeek-client.cfg $TEST_ZEEK_CLIENT_ARGS "$@"
}

# Run a command in the controller container.
controller_cmd() {
    docker_exec -i -- controller "$@"
}

# Run a command in the client container.
client_cmd() {
    docker_exec -i -- client "$@"
}
